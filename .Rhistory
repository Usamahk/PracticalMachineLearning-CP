lambda <- 0.2
sims <- 1000
set.seed(12)
my.data <- rexp(n, lambda)
mean.data <- NULL
for (i in 1:sims) {
mean.data = c(mean.data, mean(rexp(n, lambda)))
}
mean.data
head(mean.data)
n <- 40
lambda <- 0.2
sims <- 1000
set.seed(12)
my.data <- rexp(n, lambda)
mean.data <- NULL
for (i in 1:sims) {
mean.data = c(mean.data, mean(my.data))
}
mean.data
n <- 40
lambda <- 0.2
sims <- 1000
set.seed(12)
my.data <- rexp(n, lambda)
mean.data <- NULL
for (i in 1:sims) {
mean.data = c(mean.data, mean(rexp(n, lambda)))
}
mean.data
n <- 40
lambda <- 0.2
sims <- 1000
set.seed(12)
my.data <- rexp(n, lambda)
mean.data <- NULL
for (i in 1:sims) {
mean.data = c(mean.data, mean(my.data)))
}
n <- 40
lambda <- 0.2
sims <- 1000
set.seed(12)
my.data <- rexp(n, lambda)
mean.data <- NULL
for (i in 1:sims) {
mean.data = c(mean.data, mean(my.data))
}
mean.data
n <- 40
lambda <- 0.2
sims <- 1000
set.seed(12)
mean.data <- NULL
for (i in 1:sims) {
mean.data = c(mean.data, mean(rexp(n,lambda)))
}
mean.data
?scale()
library(manipulate)
myHist <- function(mu){
mse <- mean((galton$child - mu)^2)
g <- ggplot(galton, aes(x = child)) + geom_histogram(fill = "salmon", colour = "black", binwidth=1)
g <- g + geom_vline(xintercept = mu, size = 3)
g <- g + ggtitle(paste("mu = ", mu, ", MSE = ", round(mse, 2), sep = ""))
g
}
g
install.packages("UsingR")
myHist <- function(mu){
mse <- mean((galton$child - mu)^2)
g <- ggplot(galton, aes(x = child)) + geom_histogram(fill = "salmon", colour = "black", binwidth=1)
g <- g + geom_vline(xintercept = mu, size = 3)
g <- g + ggtitle(paste("mu = ", mu, ", MSE = ", round(mse, 2), sep = ""))
g
}
g
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
library(UsingR)
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
myHist <- function(mu){
mse <- mean((galton$child - mu)^2)
g <- ggplot(galton, aes(x = child)) + geom_histogram(fill = "salmon", colour = "black", binwidth=1)
g <- g + geom_vline(xintercept = mu, size = 3)
g <- g + ggtitle(paste("mu = ", mu, ", MSE = ", round(mse, 2), sep = ""))
g
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
manipulate(myHist(mu), mu = slider(62, 74, step = 0.1))
manipulate(myHist(mu), mu = slider(62, 74, step = 0.01))
library(dplyr)
freqData <- as.data.frame(table(galton$child, galton$parent))
names(freqData) <- c("child", "parent", "freq")
freqData$child <- as.numeric(as.character(freqData$child))
freqData$parent <- as.numeric(as.character(freqData$parent))
g <- ggplot(filter(freqData, freq > 0), aes(x = parent, y = child))
g <- g  + scale_size(range = c(2, 20), guide = "none" )
g <- g + geom_point(colour="grey50", aes(size = freq+20, show_guide = FALSE))
g <- g + geom_point(aes(colour=freq, size = freq))
g <- g + scale_colour_gradient(low = "lightblue", high="white")
g
library(dplyr)
freqData <- as.data.frame(table(galton$child, galton$parent))
names(freqData) <- c("child", "parent", "freq")
freqData$child <- as.numeric(as.character(freqData$child))
freqData$parent <- as.numeric(as.character(freqData$parent))
g <- ggplot(filter(freqData, freq > 0), aes(x = parent, y = child))
g <- g  + scale_size(range = c(2, 20), guide = "none" )
g <- g + geom_point(colour="grey50", aes(size = freq+20, show_guide = FALSE))
g <- g + geom_point(aes(colour=freq, size = freq))
g <- g + scale_colour_gradient(low = "lightblue", high="white")
g
library(ggplot2)
library(dplyr)
freqData <- as.data.frame(table(galton$child, galton$parent))
names(freqData) <- c("child", "parent", "freq")
freqData$child <- as.numeric(as.character(freqData$child))
freqData$parent <- as.numeric(as.character(freqData$parent))
g <- ggplot(filter(freqData, freq > 0), aes(x = parent, y = child))
g <- g  + scale_size(range = c(2, 20), guide = "none" )
g <- g + geom_point(colour="grey50", aes(size = freq+20, show_guide = FALSE))
g <- g + geom_point(aes(colour=freq, size = freq))
g <- g + scale_colour_gradient(low = "lightblue", high="white")
g
library(ggplot)
library(dplyr)
freqData <- as.data.frame(table(galton$child, galton$parent))
names(freqData) <- c("child", "parent", "freq")
freqData$child <- as.numeric(as.character(freqData$child))
freqData$parent <- as.numeric(as.character(freqData$parent))
g <- ggplot(filter(freqData, freq > 0), aes(x = parent, y = child))
freqData
g <- ggplot(filter(freqData, freq >= 0), aes(x = parent, y = child))
g <- ggplot(filter(freqData, freq>0), aes(x = parent, y = child))
g <- ggplot(filter(freqData, parent>0), aes(x = parent, y = child))
?filter
g <- g  + scale_size(range = c(2, 20), guide = "none" )
g <- g + geom_point(colour="grey50", aes(size = freq+20, show_guide = FALSE))
g <- g + geom_point(aes(colour=freq, size = freq))
g <- g + scale_colour_gradient(low = "lightblue", high="white")
g
g
g <-  scale_size(range = c(2, 20), guide = "none" )
g <- g + geom_point(colour="grey50", aes(size = freq+20, show_guide = FALSE))
g <- g + geom_point(aes(colour=freq, size = freq))
g <- g + scale_colour_gradient(low = "lightblue", high="white")
g
g <- ggplot(filter(freqData, freqData$freq > 0), aes(x = parent, y = child))
g <- g  + scale_size(range = c(2, 20), guide = "none" )
g <- g + geom_point(colour="grey50", aes(size = freq+20, show_guide = FALSE))
g <- g + geom_point(aes(colour=freq, size = freq))
g <- g + scale_colour_gradient(low = "lightblue", high="white")
g
y <- galton$child - mean(galton$child)
x <- galton$parent - mean(galton$parent)
freqData <- as.data.frame(table(x, y))
names(freqData) <- c("child", "parent", "freq")
freqData$child <- as.numeric(as.character(freqData$child))
freqData$parent <- as.numeric(as.character(freqData$parent))
myPlot <- function(beta){
g <- ggplot(filter(freqData, freq > 0), aes(x = parent, y = child))
g <- g  + scale_size(range = c(2, 20), guide = "none" )
g <- g + geom_point(colour="grey50", aes(size = freq+20, show_guide = FALSE))
g <- g + geom_point(aes(colour=freq, size = freq))
g <- g + scale_colour_gradient(low = "lightblue", high="white")
g <- g + geom_abline(intercept = 0, slope = beta, size = 3)
mse <- mean( (y - beta * x) ^2 )
g <- g + ggtitle(paste("beta = ", beta, "mse = ", round(mse, 3)))
g
}
manipulate(myPlot(beta), beta = slider(0.6, 1.2, step = 0.02))
swirl
swirl()
ls()
rm(list=ls())
library(dplyr)
freqData <- as.data.frame(table(galton$child, galton$parent))
names(freqData) <- c("child", "parent", "freq")
freqData$child <- as.numeric(as.character(freqData$child))
freqData$parent <- as.numeric(as.character(freqData$parent))
g <- ggplot(filter(freqData, freqData$freq > 0), aes(x = parent, y = child))
g <- g  + scale_size(range = c(2, 20), guide = "none" )
g <- g + geom_point(colour="grey50", aes(size = freq+20, show_guide = FALSE))
g <- g + geom_point(aes(colour=freq, size = freq))
g <- g + scale_colour_gradient(low = "lightblue", high="white")
g
library(dplyr)
freqData <- as.data.frame(table(galton$child, galton$parent))
names(freqData) <- c("child", "parent", "freq")
freqData$child <- as.numeric(as.character(freqData$child))
freqData$parent <- as.numeric(as.character(freqData$parent))
g <- ggplot(filter(freqData, freq > 0), aes(x = parent, y = child))
g <- g  + scale_size(range = c(2, 20), guide = "none" )
g <- g + geom_point(colour="grey50", aes(size = freq+20, show_guide = FALSE))
g <- g + geom_point(aes(colour=freq, size = freq))
g <- g + scale_colour_gradient(low = "lightblue", high="white")
g
View(freqData)
rm(list=ls())
library(dplyr)
freqData <- as.data.frame(table(galton$child, galton$parent))
names(freqData) <- c("child", "parent", "freq")
freqData$child <- as.numeric(as.character(freqData$child))
freqData$parent <- as.numeric(as.character(freqData$parent))
g <- ggplot(filter(freqData, freq > 0), aes(x = parent, y = child))
g <- g  + scale_size(range = c(2, 20), guide = "none" )
g <- g + geom_point(colour="grey50", aes(size = freq+20, show_guide = FALSE))
g <- g + geom_point(aes(colour=freq, size = freq))
g <- g + scale_colour_gradient(low = "lightblue", high="white")
g
y <- galton$child - mean(galton$child)
x <- galton$parent - mean(galton$parent)
freqData <- as.data.frame(table(x.y))
names(freqData) <- c("child", "parent", "freq")
freqData$child <- as.numeric(as.character(freqData$child))
freqData$parent <- as.numeric(as.character(freqData$parent))
myPlot <- function(beta){
g <- ggplot(filter(freqData, freq >0), aes(x=parent, y=child))
g <- g + scale_size(range=c(2, 20), guide="none")
g <- g + geom_point(colour="grey50", aes(size=freq+20, show_guide = FALSE))
g <- g + geom_point(aes(colour=freq, size=freq))
g <- g + scale_colour_gradient(low = "lightblue", high="white")
g <- g + geom_abline(intercept = 0, slope = beta, size = 3)
mse <- mean((y - beta*x)^2)
g <- g + ggtitle(paste("beta = ", beta, "mse = ", round(mse, 3)))
g
}
manipulate(myPlot(beta), beta = slider(0.6, 1.2, step = 0.02))
library(dplyr)
freqData <- as.data.frame(table(galton$child, galton$parent))
names(freqData) <- c("child", "parent", "frequ")
freqData$child <- as.numeric(as.character(freqData$child))
freqData$parent <- as.numeric(as.character(freqData$parent))
g <- ggplot(filter(freqData, frequ > 0), aes(x = parent, y = child))
g <- g  + scale_size(range = c(2, 20), guide = "none" )
g <- g + geom_point(colour="grey50", aes(size = frequ+20, show_guide = FALSE))
g <- g + geom_point(aes(colour=frequ, size = frequ))
g <- g + scale_colour_gradient(low = "lightblue", high="white")
g
install.packages("dplyr")
library(dplyr)
freqData <- as.data.frame(table(galton$child, galton$parent))
names(freqData) <- c("child", "parent", "frequ")
freqData$child <- as.numeric(as.character(freqData$child))
freqData$parent <- as.numeric(as.character(freqData$parent))
g <- ggplot(filter(freqData, frequ > 0), aes(x = parent, y = child))
g <- g  + scale_size(range = c(2, 20), guide = "none" )
g <- g + geom_point(colour="grey50", aes(size = frequ+20, show_guide = FALSE))
g <- g + geom_point(aes(colour=frequ, size = frequ))
g <- g + scale_colour_gradient(low = "lightblue", high="white")
g
y <- galton$child - mean(galton$child)
x <- galton$parent - mean(galton$parent)
freqData <- as.data.frame(table(x, y))
names(freqData) <- c("child", "parent", "freq")
freqData$child <- as.numeric(as.character(freqData$child))
freqData$parent <- as.numeric(as.character(freqData$parent))
myPlot <- function(beta){
g <- ggplot(filter(freqData, freq > 0), aes(x = parent, y = child))
g <- g  + scale_size(range = c(2, 20), guide = "none" )
g <- g + geom_point(colour="grey50", aes(size = freq+20, show_guide = FALSE))
g <- g + geom_point(aes(colour=freq, size = freq))
g <- g + scale_colour_gradient(low = "lightblue", high="white")
g <- g + geom_abline(intercept = 0, slope = beta, size = 3)
mse <- mean( (y - beta * x) ^2 )
g <- g + ggtitle(paste("beta = ", beta, "mse = ", round(mse, 3)))
g
}
manipulate(myPlot(beta), beta = slider(0.6, 1.2, step = 0.02))
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
myHist <- function(mu){
mse <- mean(w(x - mu)^2)
g <- ggplot(x, aes(x = x)) + geom_histogram(fill = "salmon", colour = "black", binwidth=1)
g <- g + geom_vline(xintercept = mu, size = 3)
g <- g + ggtitle(paste("mu = ", mu, ", MSE = ", round(mse, 2), sep = ""))
g
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
myHist <- function(mu){
mse <- mean(w*(x - mu)^2)
g <- ggplot(x, aes(x = x)) + geom_histogram(fill = "salmon", colour = "black", binwidth=1)
g <- g + geom_vline(xintercept = mu, size = 3)
g <- g + ggtitle(paste("mu = ", mu, ", MSE = ", round(mse, 2), sep = ""))
g
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
x
x <- c(0.18, 0.18, -1.54, 0.42, 0.42, 0.42, 0.95)
mean(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
Data <- as.data.frame(table(x,y))
data
Data
D <- as.data.frame(table(x,y))
D
x
y
D$x <- as.numeric(as.character(D$x))
D$y <- as.numeric(as.character(D$y))
g <- ggplot(filter(D, freq > 0), aes(x = x, y = y))
names(D) <- c("x", "y", "freq")
D$x <- as.numeric(as.character(D$x))
D$y <- as.numeric(as.character(D$y))
g <- ggplot(filter(D, freq > 0), aes(x = x, y = y))
g
g <- g + geom_point(colour="grey50", aes(size = freq+20, show_guide = FALSE))
g <- g + geom_point(aes(colour=freq, size = freq))
g <- g + scale_colour_gradient(low = "lightblue", high="white")
g
lm(y~x-1)
data(mtcars)
head(mtcars)
lm(mtcars$mpg~mtcars$wt-1)
lm(mtcars$wt~mtcars$mpg-1)
lm(mtcars$wt~mtcars$mpg)
lm(mtcars$mpg~mtcars$wt)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
mean(x)
sd(x)
z <- (x - 9.31)/sd(x)
z
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y~x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
lm(y~x)
lm(y~x-1)
lm(y~x-0)
install.packages("RMySQL")
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(datasets)
data(mtcars)
model_5 <- lm(mpg ~ cyl + wt + disp + am, data = mtcars)
summary(model_5)
---
title: "Course Project - Regression Models"
author: "Usamah Khan"
date: "July 24, 2015"
output: pdf_document
---
# Executive Summary
This is the submission for the Course Project as part of the Regression Models class in the Data Science Specialization. In this report we analyzed the *mtcars* dataset and explored the relationship between Miles per Gallon and transmission. Using regression models we determined that Manual transmission gives a higer *mpg* yet other factors that were more significant to *mpg* were *wt* and *qsec*. We determined the most significant variable to be *wt* with cars with heavier weight lowering *mpg* by 3.91 per unit.
# Analysis
Loading the relevent libraries and datasets.
```{r}
library(datasets)
data(mtcars)
```
Firstly, to get a grasp of the data we can do some preliminary exploration to determine what kind of data we are working with. we use the *str* function to view it quickly.
```{r}
str(mtcars)
```
There are 32 observations of 11 variables. We are to determine whether or not automatic transmission is better than manual so for the time being let us isolate the variables *mpg* and *am*. We can do so visually performing a basic exploratory analysis with the use of a plot and with the use of the *lm()* function.
#### Note - all figures and summaries can be found in the Appendix under *Models*
```{r}
model_1 <- lm(mpg ~ am, data = mtcars)
```
The box plot (found in the appendix) makes it evident that manual transmission has a better mpg than automatic. From the results of the *lm* model summary we can take that due to a p value of 2.8%, the change in *mpg* due to transmission is significant. However due to a low R-squared value, we can see that there is a lot of room for improvement. The correlation itself could very well be due to other factors such as number of cylinders, displacement, rear axle ratio etc. To truly see the effect of transmission, we need to create a model that tests all variables against *mpg* and determines the ones with greatest effect. We can again use the *lm* function.
```{r}
model_2 <- lm(mpg ~ ., data = mtcars)
```
The model gives us an adjusted R-squared value of 0.8066 explaining 80% of the variance of *mpg*. However, none of the coefficients are significant with a p-value > 0.05. The most significant variables however are *wt*, *am* and *qsec*. We can apply a models using these predictors.
```{r}
model_3 <- lm(mpg ~ wt + am + qsec, data = mtcars)
```
This model is slightly better with a R-squared value of 0.8336 and all three variables significant with p-values < 0.05. We have to note that we took these coefficients from a model that may not have been accurate to begin with. We have been using *lm* up until this point which is a Type II calculation based on adjusted sum of squares. We can use *aov* to model by doing a Type I sequential sum of squares.
```{r}
model_4 <- aov(mpg ~ ., data = mtcars)
```
This model converts different variables to factors and the result shows us that the statistically significant variables are are *cyl*, *wt* and *disp*.  *am* (transmission) does not seem to have that great of an effect as compared to these 3. However, we were asked to quantify with relation to transmission so we will need to include that in the further models we make.
Hence, we pick our last model with the variable *cyl*, *wt*,*disp* and *am* but use *lm* to model.
```{r}
model_5 <- lm(mpg ~ cyl + wt + disp + am, data = mtcars)
```
We find this model with an adjusted R-squared value of 0.8079 with 2 variables significant with p-values < 0.05.
Now to compare all the models we can use the *ANOVA* function with the reference being *model_2*, all variables. We select *model_3* since its p-value is the most significant.
```{r}
Final <- anova(model_1, model_2, model_3, model_4, model_5)
```
Final <- anova(model_1, model_2,model_3)
Final
Final <- anova(model_1, model_2,model_3, model_4)
Final
Final <- anova(model_1, model_2,model_3, model_4, model_5)
Final
install.packages("shiny")
library(shiny)
library(shiny)
install.packages("shiny")
library(shiny)
library(shiny)
require(rCharts)
install.packages("rcharts")
library(devtools)
require(devtools)
install_github('rCharts', 'ramnathv')
haireye = as.data.frame(HairEyeColor)
n1 <- nPlot(Freq ~ Hair, group = eye, type = "multiBarChart", data = subset(haireye, Sex == "Male"))
require(rCharts)
haireye = as.data.frame(HairEyeColor)
n1 <- nPlot(Freq ~ Hair, group = eye, type = "multiBarChart", data = subset(haireye, Sex == "Male"))
require(rCharts)
haireye = as.data.frame(HairEyeColor)
n1 <- nPlot(Freq ~ Hair, group = "Eye", type = "multiBarChart", data = subset(haireye, Sex == "Male"))
n1
Test
Test
========================================================
author: Usamah Khan
date: `r data()`
First Slide
========================================================
For more details on authoring R presentations click the
**Help** button on the toolbar.
- Bullet 1
- Bullet 2
- Bullet 3
Slide With Code
========================================================
```{r}
summary(cars)
```
Slide With Plot
========================================================
```{r, echo=FALSE}
plot(cars)
```
install.packages(c("evaluate", "formatR", "highr", "rmarkdown", "RMySQL", "UsingR", "xml2"))
install.packages("RMySQL")
install.packages("RMySQL")
install.packages(c("dplyr", "rJava"), lib="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
install.packages("RSQLite")
52! - 49!
factorial(52)-factorial(39)
sum([i for i in range(1000) if i % 3 == 0 or i % 5 == 0])
3 % %
3
3%3
3mod3
3 %% 3
for(i in 1:1000){
if (i %% 3 = 0 num <- i)
}
for(i in 1:1000){
if {(i %% 3 = 0 num <- i)}
}
for(i in 1:1000){
if(i %% 3 == 0) num <- i
}
head(num)
num <- data.frame()
count= 1
for(i in 1:1000){
if(i %% 3 == 0){
num[count,] <- i
count = count + 1}
}
if(i %% 3 == 0 OR i %% 5 == 0){
num[count,] <- i
count = count + 1}
}
count= 1
for(i in 1:1000){
if(i %% 3 == 0 || i %% 5 == 0){
num[count,] <- i
count = count + 1}
}
sum(num)
View(num)
count= 1
for(i in 1:1000){
if(i %% 3 == 0 || i %% 5 == 0){
num[count,1] <- i
count = count + 1}
}
count= 1
for(i in 1:1000){
if(i %% 3 == 0 || i %% 5 == 0){
num[count,1] <- i
count = count + 1}
}
View(num)
sum(c(3,5,6,9))
sum(num)
count= 1
for(i in 1:2850){
if(i %% 3 == 0 || i %% 5 == 0){
num[count,1] <- i
count = count + 1}
}
sum(num)
library(parallel)
detectCores()
library(RgoogleMaps)
GetMap()
GetMap(zoom = 1)
map("world")
libary(maps)
library(maps)
library(ggmaps)
library(ggmap)
map("world")
library(knitr)
library(markdown)
setwd("~/Documents/Courses and Books/Coursera/Data Science Specialization - Johns Hopkins/8 - Practical Machine Learning")
knit("Course Project.Rmd")
knit_with_parameters('~/Documents/Courses and Books/Coursera/Data Science Specialization - Johns Hopkins/8 - Practical Machine Learning/Course Project.Rmd')
knit("Course Project.Rmd")
